#!/usr/bin/env python3

import sys
import socket
import ssl
import argparse
import base64
import select

def create_proxy_tunnel(proxy_host, proxy_port, target_host, target_port, proxy_username=None, proxy_password=None, verify_ssl=True):
    # Create SSL context
    ssl_context = ssl.create_default_context()
    if not verify_ssl:
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE

    # Create initial socket
    sock = socket.create_connection((proxy_host, proxy_port))

    # Wrap socket with SSL
    ssl_sock = ssl_context.wrap_socket(sock, server_hostname=proxy_host)

    # Prepare proxy authorization if credentials are provided
    auth_header = ""
    if proxy_username and proxy_password:
        auth = f"{proxy_username}:{proxy_password}"
        auth_bytes = base64.b64encode(auth.encode()).decode()
        auth_header = f"Proxy-Authorization: Basic {auth_bytes}\r\n"

    # Send CONNECT request
    connect_request = (
        f"CONNECT {target_host}:{target_port} HTTP/1.1\r\n"
        f"Host: {target_host}:{target_port}\r\n"
        f"{auth_header}"
        "Proxy-Connection: Keep-Alive\r\n"
        "\r\n"
    )

    ssl_sock.send(connect_request.encode())

    # Read response
    response = ""
    while "\r\n\r\n" not in response:
        response += ssl_sock.recv(1).decode()

    # Check if connection was successful
    status_line = response.split("\r\n")[0]
    if not status_line.startswith("HTTP/1.1 200"):
        raise Exception(f"Proxy connection failed: {status_line}")

    return ssl_sock

def main():
    parser = argparse.ArgumentParser(description='SSH ProxyCommand for HTTPS proxy')
    parser.add_argument('--proxy', required=True, help='Proxy address (host:port)')
    parser.add_argument('-u', '--username', help='Proxy username')
    parser.add_argument('-p', '--password', help='Proxy password')
    parser.add_argument('--no-verify-ssl', action='store_true', help='Disable SSL verification')
    parser.add_argument('target_host', help='Target SSH host')
    parser.add_argument('target_port', type=int, help='Target SSH port')

    args = parser.parse_args()

    # Parse proxy address
    proxy_host, proxy_port = args.proxy.split(':')
    proxy_port = int(proxy_port)

    try:
        # Create tunnel
        tunnel_socket = create_proxy_tunnel(
            proxy_host,
            proxy_port,
            args.target_host,
            args.target_port,
            args.username,
            args.password,
            not args.no_verify_ssl
        )

        # Forward data between stdin/stdout and the tunnel
        while True:
            r, w, e = select.select([sys.stdin, tunnel_socket], [], [])

            if tunnel_socket in r:
                data = tunnel_socket.recv(4096)
                if not data:
                    break
                sys.stdout.buffer.write(data)
                sys.stdout.buffer.flush()

            if sys.stdin in r:
                data = sys.stdin.buffer.read1(4096)
                if not data:
                    break
                tunnel_socket.sendall(data)

    except Exception as e:
        sys.stderr.write(f"Error: {str(e)}\n")
        sys.exit(1)
    finally:
        if 'tunnel_socket' in locals():
            tunnel_socket.close()

if __name__ == "__main__":
    main()
