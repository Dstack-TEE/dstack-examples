services:
  nginx:
    build:
      context: .
      dockerfile_inline: |
        FROM nginx:alpine
        
        RUN apk add --no-cache certbot openssl bash python3 py3-pip curl jq 
        # Create a virtual environment to install the plugin
        RUN python3 -m venv /opt/certbot-venv
        RUN /opt/certbot-venv/bin/pip install certbot-dns-cloudflare
        RUN mkdir -p /etc/letsencrypt /var/www/certbot /usr/share/nginx/html
        ENTRYPOINT ["/entrypoint.sh"]
        CMD ["nginx", "-g", "daemon off;"]
    ports:
      - "443:443"
    environment:
      - TPROXY_DOMAIN=$TPROXY_DOMAIN
      - DOMAIN=$DOMAIN
      - CLOUDFLARE_API_TOKEN=$CLOUDFLARE_API_TOKEN
      - CLOUDFLARE_ZONE_ID=$CLOUDFLARE_ZONE_ID
      - CERTBOT_EMAIL=$CERTBOT_EMAIL
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot:/var/www/certbot
      - /var/run/tappd.sock:/var/run/tappd.sock
    configs:
      - source: nginx_conf
        target: /etc/nginx/conf.d/default.conf
      - source: entrypoint_script
        target: /entrypoint.sh
        mode: 0755
      - source: renew_certificate_script
        target: /renew-certificate.sh
        mode: 0755
      - source: index_html
        target: /usr/share/nginx/html/index.html
        mode: 0755
    restart: unless-stopped

volumes:
  letsencrypt:
  certbot:

configs:
  nginx_conf:
    content: |
      server {
          listen 443 ssl;
          server_name ${DOMAIN};
          
          ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
          
          location / {
              root /usr/share/nginx/html;
              index index.html;
          }
      }
  index_html:
    content: |
      <h1>Hello, This is ${DOMAIN}</h1>

  entrypoint_script:
    content: |
      #!/bin/bash
      set -e
      # Check if certificate already exists
      if [ ! -d "/etc/letsencrypt/live/$DOMAIN" ]; then
          echo "Obtaining new certificate for $DOMAIN"
          
          # Create Cloudflare credentials file
          mkdir -p ~/.cloudflare
          echo "dns_cloudflare_api_token = $CLOUDFLARE_API_TOKEN" > ~/.cloudflare/cloudflare.ini
          chmod 600 ~/.cloudflare/cloudflare.ini
          
          # Request certificate using the virtual environment
          /opt/certbot-venv/bin/certbot certonly --dns-cloudflare \
              --dns-cloudflare-credentials ~/.cloudflare/cloudflare.ini \
              --email $CERTBOT_EMAIL \
              --agree-tos --no-eff-email \
              -d $DOMAIN

          # Add DNS CNAME record for the domain
          echo "Adding CNAME record for $DOMAIN pointing to $TPROXY_DOMAIN"
          curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "{
                  \"type\": \"CNAME\",
                  \"name\": \"$DOMAIN\",
                  \"content\": \"$TPROXY_DOMAIN\",
                  \"ttl\": 60,
                  \"proxied\": false
              }"
          
          # Add TXT record for the domain
          APP_ID=$(curl --unix-socket /var/run/tappd.sock http://localhost/prpc/Tappd.Info | jq -j .app_id)
          echo "Adding TXT record for $DOMAIN pointing to $$APP_ID"
          curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "{
                  \"type\": \"TXT\",
                  \"name\": \"_tapp-address.$DOMAIN\",
                  \"content\": \"$$APP_ID:443\",
                  \"ttl\": 60,
                  \"proxied\": false
              }"
      else
          echo "Certificate for $DOMAIN already exists"
      fi
      
      # Add cron job for certificate renewal
      echo "0 0,12 * * * /renew-certificate.sh" > /etc/crontabs/root
      crond
      
      exec "$@"
  
  renew_certificate_script:
    content: |
      #!/bin/bash
      
      /opt/certbot-venv/bin/certbot renew --quiet
      nginx -s reload
